// ==========================================================================
// Anchos minimos (min-width) : @include mq-min(sm) {}
// ==========================================================================
@mixin mq-min($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// ==========================================================================
// Anchos maximos (max-width) : @include mq-max(sm) {}
// ==========================================================================
@mixin mq-max($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// ==========================================================================
// Anchos maximos / minimos (max-width and min-width) : @include mq-between(sm, md) {}
// ==========================================================================
@mixin mq-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $lower) ==false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    @if (map-has-key($breakpoints, $upper) ==false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}
//@include orientation(landscape) 
@mixin orientation($direction) { 

  $orientation-landscape: "(orientation:landscape)"; 
  $orientation-portrait: "(orientation:portrait)";

  @if $direction == landscape {
    @media #{$orientation-landscape} { @content; } 
  }
  @if $direction == portrait {
    @media #{$orientation-portrait} { @content; } 
  }
} 

// ==========================================================================
// Mixins para la orientación de la barra de navegación: @include nav( ... );
// ==========================================================================
@mixin nav($direction, $marginClassName, $marginClassStyle, $marginUnset) {
  flex-direction: $direction;

  @if $marginClassName == 'margin-bottom' {
    li:not(:last-child) {
      #{$marginClassName}: $marginClassStyle;
      #{$marginUnset}: unset;
    }
  } @else {
    li:not(:last-child) {
      #{$marginClassName}: $marginClassStyle;
      #{$marginUnset}: unset;
    }
  }
}

// ==========================================================================
// Mixins para la generación de los botones : @include button( ... );
// ==========================================================================
@mixin button($bg, $color: #ffffff, $border: transparent) {
  color: $color;

  // propiedades para botón outline
  @if $bg == transparent{
    background: #ffffff;
    &:hover {
      background: $border;
      color: #ffffff;
      transition: background 0.2s ease;
      text-decoration: none;
    }
    &:focus {
      background: darken($border, 7%);
      box-shadow: 0 0 0 0.15rem rgba(color(primary, base), 0.25);
      color: #ffffff;
      outline: 0;
      text-decoration: none;
    }
    &:active {
      background: darken($border, 10%);
    }
    
  // propiedades para botón con background
  } @else{
    background: $bg;
    &:hover {
      background: darken($bg, 7%);
      transition: background 0.2s ease;
      text-decoration: none;
    }
    &:focus {
      outline: 0;
      // box-shadow: 0 0 0 0.15rem rgba(color(primary, base), 0.25);
      text-decoration: none;
    }
    &:active {
      background: darken($bg, 10%);
    }
  }
  
  &.disabled,
  &:disabled {
    opacity: 0.55;
    color: $color;
    box-shadow: none;
    cursor: auto;
    &:hover {
      background: $bg;
    }
    &:focus {
      box-shadow: none;
    }
  }
}

// ==========================================================================
// Mixins para el texto @include text(1.2rem,1.6) 
// ==========================================================================
@mixin text($tamano, $line-height) {
      font-size: $tamano;
      line-height:$line-height;
}

// ==========================================================================
// Mixins Avatar Perfil
// ==========================================================================
@mixin perfil($width, $height, $border) {
  .perfil {
    width: $width;
    height: $width;
    border: $border;
    border-radius: 50%;
    overflow: hidden;
    transition: 0.3s;
    cursor: pointer;
    img {
      display: block;
      height: 100%;
      max-width: 100%;
      object-fit: cover;
      object-position: center;
      width: 100%;
    }
  }
}

// ==========================================================================
// Mixins para eliminar apariencia por defecto del navegador
// ==========================================================================
@mixin appearance($value) {
  -webkit-appearance: ($value);
  -moz-appearance: ($value);
  -ms-appearance: ($value);
  -o-appearance: ($value);
  appearance: ($value);
}

// Funcion que define los colores del sistema basado en el mapa de colores establecido en las variables
@function color($color, $tone) {
  @if map-has-key($colors, $color) {
    $color: map-get($colors, $color);
    @if map-has-key($color, $tone) {
      $tone: map-get($color, $tone);
      @return $tone;
    }
  }
}

// ==========================================================================
// Mixins placeholder
// ==========================================================================
@mixin placeholder($selector, $color, $fontWeight, $size) {
  #{$selector}::-webkit-input-placeholder {
    color: $color;
    font-weight: $fontWeight;
    $size: font-size;
  }
  #{$selector}::-moz-placeholder {
    color: $color;
    font-weight: $fontWeight;
    $size: font-size;
  }
  #{$selector}:-ms-input-placeholder {
    color: $color;
    font-weight: $fontWeight;
    $size: font-size;
  }
}

// RGB to RGBA
//example -> background-color: hex-to-rgba($color-3, 0.68);
@function hex-to-rgba($color: #FFF, $opacity: 0.5) {
  @return rgba(red($color), green($color), blue($color), $opacity);
}


// ==========================================================================
// Titulos : @include titles (color, font-family){}
// ==========================================================================

@mixin titles($color, $font-family){
    color: color(primary,base);
    font-family: $font-primary;
}

// ==========================================================================
// Grid : @include grid (1rem, display);
// ==========================================================================

@mixin grid($gap, $display){
  display: grid;
  grid-gap: $gap;
}
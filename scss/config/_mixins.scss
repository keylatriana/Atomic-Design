// ==========================================================================
// Anchos minimos (min-width) : @include mq-min(sm) {}
// ==========================================================================
@mixin mq-min($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// ==========================================================================
// Anchos maximos (max-width) : @include mq-max(sm) {}
// ==========================================================================
@mixin mq-max($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// ==========================================================================
// Anchos maximos / minimos (max-width and min-width) : @include mq-between(sm, md) {}
// ==========================================================================
@mixin mq-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $lower) ==false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    @if (map-has-key($breakpoints, $upper) ==false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}
//@include orientation(landscape) 
@mixin orientation($direction) { 

  $orientation-landscape: "(orientation:landscape)"; 
  $orientation-portrait: "(orientation:portrait)";

  @if $direction == landscape {
    @media #{$orientation-landscape} { @content; } 
  }
  @if $direction == portrait {
    @media #{$orientation-portrait} { @content; } 
  }
} 

// ==========================================================================
// Mixins para la orientación de la barra de navegación: @include nav( ... );
// ==========================================================================
@mixin nav($direction) {
  flex-direction: $direction;
  justify-content: space-between;
  list-style: none !important;
}

// ==========================================================================
// Mixins para la generación de los botones : @include button( ... );
// ==========================================================================
@mixin button($bg, $color: #ffffff, $border-color: transparent, $border-width: 0rem, $border-radius: 0.3rem) {
  
  border: $border-width solid $border-color;
  border-radius: $border-radius;
  color: $color;  
  cursor:pointer;
  font-family: $font-primary;
  font-size: $font-size;
  margin: 0.5rem 0;
  padding: 0.6rem 1.2rem;
  text-align: center;

  // se trata de un boton ghost u outline
  @if($bg == transparent or $bg == color(grayscale, white)) {
    background: $bg;

    &:hover {
      background: $border-color;
      color: color(grayscale, white);
      transition: background 0.2s ease;
      text-decoration: none;
    }
    &:focus {
      background: darken($border-color, 7%);
      box-shadow: 0 0 0 0.15rem rgba(color(primary,500), 0.25);
      color: color(grayscale, white);
      outline: 0;
      text-decoration: none;
    }
    &:active {
      background: darken($border-color, 10%);
    }

    // Se trata de un botón sólido
  } @else{
    background: $bg;
    &:hover {
      background: darken($bg, 7%);
      transition: background 0.2s ease;
      text-decoration: none;
    }
    &:focus {
      background: darken($bg, 7%);
      outline: 0;
      text-decoration: none;
    }
    &:active {
      background: darken($bg, 10%);
    }
  }

  &.disabled,
  &:disabled {
    opacity: 0.55;
    color: $color;
    box-shadow: none;
    cursor: auto;
    &:hover {
      background: $bg;
    }
    &:focus {
      box-shadow: none;
    }
  }
}
@mixin input($bg, $color,  $border-style, $border-width,$border,$border-radius) {
  border: $border-style $border-width $border;
  border-radius:$border-radius;
  color: $color;
  cursor:pointer;
  font-family: $font-primary;
  margin: 0.5rem;
  padding: 0.5rem;
  // propiedades para input outline
  @if $bg == transparent{
    background: transparent;
    &:hover {
      background: $bg;
    }
    &:focus {
      background: darken($bg, 0%);
      box-shadow: 0 0 0 0.15rem rgba(color(primary,500), 0.25);
      outline: 0;
    }
    &:active {
      background: darken($bg, 0%);
    }
    
  // propiedades para input con background
  } @else{
    background: $bg;
    &:hover {
      background: darken($bg, 7%);
      transition: background 0.2s ease;
    }
    &:focus {
      background: darken($bg, 7%);
      outline: 0;
    }
    &:active {
      background: darken($bg, 10%);
    }
  }
  &:disabled {
    opacity: 0.55;
    color: $color;
    box-shadow: none;
    cursor: auto;
    &:hover {
      background: $bg;
    }
    &:focus {
      box-shadow: none;
    }
  }
}
@mixin select($bg, $color,  $border-style, $border-width,$border,$border-radius) {
  border: $border-style $border-width $border;
  border-radius: $border-radius;
  color: $color;
  cursor:pointer;
  font-family: $font-primary;
  margin: 0.5rem;
  padding: 0.5rem 2rem 0.5rem 0.5rem;
  // propiedades para input outline
    &:hover {
      outline-color:color(primary,500);
    }
    &:focus {
      outline-color: rgba(color(primary,500), 0.5);
    }
    &:active {
      outline-color: rgba(color(secondary,300), 0.5);
    } 
  &:disabled {
    opacity: 0.55;
    color: $color;
    box-shadow: none;
    cursor: auto;
  }
}

// ==========================================================================
// Mixins para links @include text(1.2rem,1.6) 
// ==========================================================================
@mixin link ($color){
  color: $color;
  display: inline-block;
  outline: 0;
  text-decoration: none;
  transition: color .1s ease-out;
  vertical-align: middle;

  &:hover{
    color: color(secondary,900);
  }
  &:focus{
    outline: dotted;
  }
}

// ==========================================================================
// Mixins para el texto @include text(1.2rem,1.6) 
// ==========================================================================
@mixin text($tamano, $line-height) {
      font-size: $tamano;
      line-height:$line-height;
}

// ==========================================================================
// Mixins Avatar Perfil
// ==========================================================================
@mixin perfil($width, $height, $border) {
  .perfil {
    width: $width;
    height: $width;
    border: $border;
    border-radius: 50%;
    overflow: hidden;
    transition: 0.3s;
    cursor: pointer;
    img {
      display: block;
      height: 100%;
      max-width: 100%;
      object-fit: cover;
      object-position: center;
      width: 100%;
    }
  }
}

// ==========================================================================
// Mixins para eliminar apariencia por defecto del navegador
// ==========================================================================
@mixin appearance($value) {
  -webkit-appearance: ($value);
  -moz-appearance: ($value);
  -ms-appearance: ($value);
  -o-appearance: ($value);
  appearance: ($value);
}

// Funcion que define los colores del sistema basado en el mapa de colores establecido en las variables
@function color($color, $tone) {
  @if map-has-key($colors, $color) {
    $color: map-get($colors, $color);
    @if map-has-key($color, $tone) {
      $tone: map-get($color, $tone);
      @return $tone;
    }
  }
}

// ==========================================================================
// Mixins placeholder
// ==========================================================================
@mixin placeholder($selector, $color, $fontWeight, $size) {
  #{$selector}::-webkit-input-placeholder {
    color: $color;
    font-weight: $fontWeight;
    $size: font-size;
  }
  #{$selector}::-moz-placeholder {
    color: $color;
    font-weight: $fontWeight;
    $size: font-size;
  }
  #{$selector}:-ms-input-placeholder {
    color: $color;
    font-weight: $fontWeight;
    $size: font-size;
  }
}

@mixin linear-gradient($direction, $color-stops...) {
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

// ==========================================================================
// Titulos : @include titles (color, font-family){}
// ==========================================================================

@mixin titles($color, $font-family,$font-size,$line-height){
    color: color(primary,500);
    font-family: $font-primary;
    font-size: $font-size;
    line-height: $line-height;
}

// ==========================================================================
// Grid : @include grid (1rem, display);
// ==========================================================================

@mixin grid($gap, $display,$grid-colums){
  display: grid;
  grid-gap: $gap;
  grid-template-columns: $grid-colums;
}